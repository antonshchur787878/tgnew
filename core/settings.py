"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.
"""

from pathlib import Path
from datetime import timedelta
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.celery import CeleryIntegration
import environ
import subprocess
import logging.handlers
import json
import os
from django.conf.urls.static import static  # Добавлено для динамического обслуживания статических файлов

# Инициализация переменных окружения
env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Создаем папку logs, если она не существует
LOG_DIR = BASE_DIR / 'logs'
LOG_DIR.mkdir(exist_ok=True)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True)  # Включено для разработки

# Добавляем ngrok-URL в ALLOWED_HOSTS
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1', '10.77.77.50', 'bee7-109-87-213-171.ngrok-free.app'])

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Необходимо для allauth
    'allauth',              # Убедитесь, что django-allauth установлен
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',  # Поддержка Google
    'allauth.socialaccount.providers.telegram',  # Поддержка Telegram
    'users',  # Для кастомного провайдера
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'bots',
    'webpack_loader',       # Для работы со статическими файлами React
    'csp',                  # Для управления Content Security Policy
]

# Условно добавляем debug_toolbar только в режиме DEBUG
if DEBUG:
    INSTALLED_APPS += ['debug_toolbar']

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'core.middleware.OAuthRedirectLoggerMiddleware',  # Убедитесь, что файл middleware.py существует
]

# Условно добавляем middleware для debug_toolbar
if DEBUG:
    MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')  # Добавляем первым

# IP-адреса, с которых доступен debug_toolbar
INTERNAL_IPS = ['127.0.0.1']

ROOT_URLCONF = 'core.urls'

AUTH_USER_MODEL = 'users.CustomUser'

# Настройки аутентификации
AUTHENTICATION_BACKENDS = (
    'allauth.account.auth_backends.AuthenticationBackend',  # Приоритет для allauth
)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Добавлено для поддержки шаблонов переводов
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',  # Для поддержки переводов
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'),
        'PORT': env('DB_PORT'),
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        },
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'users.validators.ComplexPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'ru-ru'
LANGUAGES = [
    ('ru', 'Русский'),
    ('en', 'English'),
    ('uk', 'Українська'),
]
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/staticfiles/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'staticfiles', 'dist'),  # Только собранные файлы из dist
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Куда собираются статические файлы
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'  # Для хеширования файлов

# Убедимся, что другие директории не добавляются автоматически
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
    },
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# Настройки Simple JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15) if not DEBUG else timedelta(days=7),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1) if not DEBUG else timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# Ключ для шифрования
ENCRYPTION_KEY = env('ENCRYPTION_KEY')

# Telegram bot settings
TELEGRAM_BOT_TOKEN = env('TELEGRAM_BOT_TOKEN', default='7615070961:AAEz_Ypvz96bK0iKfPCWfKuEahCOD7mEXy4')

# Social Auth settings (используем allauth)
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/dashboard/'
SOCIAL_AUTH_LOGIN_ERROR_URL = '/login-error/'

# Лимит времени ожидания для API-запросов
API_RECV_WINDOW = 10000

# Настройки кэширования
REDIS_URL = env('REDIS_URL')
REDIS_CACHE_DB = env('REDIS_CACHE_DB')
REDIS_CELERY_DB = env('REDIS_CELERY_DB')

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"{REDIS_URL}/{REDIS_CACHE_DB}",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Добавляем настройки таймаутов кэширования
PRICE_CACHE_TIMEOUT = 60
KLINES_CACHE_TIMEOUT = 300
TRADING_PAIRS_CACHE_TIMEOUT = 3600
INDICATOR_CACHE_TIMEOUT = 300

# Celery settings
CELERY_BROKER_URL = f"{REDIS_URL}/{REDIS_CELERY_DB}"
CELERY_RESULT_BACKEND = f"{REDIS_URL}/{REDIS_CELERY_DB}"
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_TASK_TIME_LIMIT = 300
CELERY_TASK_SOFT_TIME_LIMIT = 270

# Настройка очередей
CELERY_TASK_QUEUES = {
    'default': {
        'exchange': 'default',
        'routing_key': 'default',
    },
    'trading': {
        'exchange': 'trading',
        'routing_key': 'trading',
    },
    'logging': {
        'exchange': 'logging',
        'routing_key': 'logging',
    },
}

# Назначение задач в очереди
CELERY_TASK_ROUTES = {
    'bots.tasks.run_trading_strategy': {'queue': 'trading'},
    'bots.tasks.log_action': {'queue': 'logging'},
}

# Логирование
class JsonFormatter(logging.Formatter):
    def format(self, record):
        log_data = {
            'level': record.levelname,
            'timestamp': self.formatTime(record, self.datefmt),
            'module': record.module,
            'message': record.getMessage(),
        }
        if record.exc_info:
            log_data['exception'] = self.formatException(record.exc_info)
        return json.dumps(log_data)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json': {
            '()': JsonFormatter,
        },
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'bots': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'bots.indicators': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'core': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}

# Sentry integration
def get_git_commit_hash():
    try:
        return subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD'], stderr=subprocess.DEVNULL).decode('ascii').strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        return 'unknown'

sentry_sdk.init(
    dsn=env('SENTRY_DSN'),
    integrations=[
        DjangoIntegration(),
        CeleryIntegration(),
    ],
    send_default_pii=False,
    traces_sample_rate=0.1 if not DEBUG else 1.0,
    debug=DEBUG,
    environment='development' if DEBUG else 'production',
    release=get_git_commit_hash(),
    send_client_reports=True
)

# Настройки HTTPS для продакшена
SECURE_SSL_REDIRECT = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG
SECURE_HSTS_PRELOAD = not DEBUG
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

# Настройки админки
ADMIN_URL = 'admin/'
ADMIN_SITE_HEADER = "Crypto Bot Platform Admin"
ADMIN_SITE_TITLE = "Crypto Bot Admin"
ADMIN_INDEX_TITLE = "Welcome to Crypto Bot Admin"

# Настройки для webpack_loader
WEBPACK_LOADER = {
    'DEFAULT': {
        'CACHE': not DEBUG,
        'BUNDLE_DIR_NAME': 'dist/',
        'STATS_FILE': os.path.join(BASE_DIR, 'frontend', 'webpack-stats.json'),
        'POLL_INTERVAL': 0.1,
        'TIMEOUT': None,
        'IGNORE': [r'.+\.hot-update\.js', r'.+\.map']
    }
}

# Дополнительные настройки для allauth
SITE_ID = 1
ACCOUNT_SIGNUP_FIELDS = []
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_ADAPTER = 'users.adapters.CustomSocialAccountAdapter'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# Настройки сессий
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600
SESSION_SAVE_EVERY_REQUEST = True

# Настройки email
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Настройки социальных провайдеров
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
        'APP': {
            'client_id': '89534307373-nqstau1sh3v0cogrkmkulgmp49qvfs74.apps.googleusercontent.com',
            'secret': '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',
            'key': ''
        },
        'REDIRECT_URI': 'https://bee7-109-87-213-171.ngrok-free.app/accounts/google/login/callback/'  # Обновлено для ngrok
    },
    'telegram': {
        'APP': {
            'client_id': '@TradeGuardBot',  # Убедитесь, что это имя вашего бота
            'secret': '7615070961:AAEz_Ypvz96bK0iKfPCWfKuEahCOD7mEXy4',
            'key': ''
        },
        'AUTH_PARAMS': {
            'auth_date_validity': 86400
        },
        'SETTINGS': {
            'AUTHORIZATION_URL': 'https://oauth.telegram.org/auth',
            'ACCESS_TOKEN_URL': None,
            'REDIRECT_URI': 'https://bee7-109-87-213-171.ngrok-free.app/accounts/telegram/login/callback/'  # Обновлено
        }
    }
}

# Настройки Content Security Policy
CONTENT_SECURITY_POLICY = {
    'DIRECTIVES': {
        'default-src': ("'self'",),
        'img-src': ("'self'", 'data:'),
        'script-src': ("'self'", "'unsafe-eval'", 'https://accounts.google.com', 'https://*.google.com', 'https://telegram.org', 'https://api.telegram.org'),
        'style-src': ("'self'",),
        'connect-src': ("'self'", 'https://o4509289022095360.ingest.de.sentry.io'),
    }
}